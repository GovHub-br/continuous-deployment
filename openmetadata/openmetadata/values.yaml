openmetadata:
  config:
    openmetadata:
      host: "0.0.0.0"
      # URI to use with OpenMetadata Alerts Integrations
      uri: "http://openmetadata.openmetadata.svc.cluster.local:8585"
      port: 8585
      adminPort: 8586
      maxThreads: 50
      minThreads: 10
      idleThreadTimeout: "1 minute"
    elasticsearch:
      enabled: true
      host: opensearch
      searchType: opensearch
      port: 9200
      scheme: http
      clusterAlias: ""
      # Value in Bytes
      payLoadSize: 10485760
      connectionTimeoutSecs: 5
      socketTimeoutSecs: 60
      batchSize: 100
      searchIndexMappingLanguage: "EN"
      keepAliveTimeoutSecs: 600
    database:
      enabled: true
      host: mysql
      port: 3306
      driverClass: com.mysql.cj.jdbc.Driver
      dbScheme: mysql
      databaseName: openmetadata_db
      auth:
        username: openmetadata_user
        password:
          secretRef: mysql-secrets
          secretKey: openmetadata-mysql-password
      dbParams: "allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC"
      maxSize: 50
      minSize: 10
      initialSize: 10
      checkConnectionWhileIdle: true
      checkConnectionOnBorrow: true
      evictionInterval: 5 minutes
      minIdleTime: 1 minute
    pipelineServiceClientConfig:
      enabled: true
      className: "org.openmetadata.service.clients.pipeline.airflow.AirflowRESTClient"
      # endpoint url for airflow
      apiEndpoint: http://airflow-webserver.airflow.svc.cluster.local:8080 # trocar aqui
      # this will be the api endpoint url of OpenMetadata Server
      metadataApiEndpoint: http://openmetadata.openmetadata.svc.cluster.local:8585/api
      # possible values are "no-ssl", "ignore", "validate"
      verifySsl: "no-ssl"
      hostIp: ""
      ingestionIpInfoEnabled: false
      # healthCheckInterval in seconds
      healthCheckInterval: 300
      # local path in Airflow Pod
      sslCertificatePath: "/no/path"
      auth:
        enabled: true
        username: admin # trocar pra credencial
        password:
          secretRef: airflow-webserver-admin-credentials # criar essa secret
          secretKey: WEBSERVER_DEFAULT_USER_PASSWORD
        trustStorePath: ""
        trustStorePassword:
          secretRef: ""
          secretKey: ""
    authorizer:
      enabled: true
      className: "org.openmetadata.service.security.DefaultAuthorizer"
      containerRequestFilter: "org.openmetadata.service.security.JwtFilter"
      initialAdmins:
      - "admin"
      allowedEmailRegistrationDomains:
      - "all"
      principalDomain: "open-metadata.org"
      allowedDomains: []
      enforcePrincipalDomain: false
      enableSecureSocketConnection: false
      useRolesFromProvider: false
    authentication:
      enabled: true
      clientType: public
      provider: "basic"
      publicKeys:
      - "http://openmetadata.openmetadata.svc.cluster.local:8585/api/v1/system/config/jwks"
      authority: "https://accounts.google.com"
      clientId: ""
      callbackUrl: ""
      responseType: id_token
      jwtPrincipalClaims:
      - "email"
      - "preferred_username"
      - "sub"
      jwtPrincipalClaimsMapping: []
      # jwtPrincipalClaimsMapping:
      # - username:sub
      # - email:email
      enableSelfSignup: true
      ldapConfiguration:
        host: localhost
        port: 10636
        dnAdminPrincipal: "cn=admin,dc=example,dc=com"
        dnAdminPassword:
          secretRef: ldap-admin-secret
          secretKey: openmetadata-ldap-secret
        userBaseDN: "ou=people,dc=example,dc=com"
        mailAttributeName: email
        maxPoolSize: 3
        sslEnabled: false
        groupBaseDN: ""
        roleAdminName: ""
        allAttributeName: ""
        usernameAttributeName: ""
        groupAttributeName: ""
        groupAttributeValue: ""
        groupMemberAttributeName: ""
        authRolesMapping: ""
        authReassignRoles: []
        # Possible values are CustomTrustStore, HostName, JVMDefault, TrustAll
        truststoreConfigType: TrustAll
        trustStoreConfig:
          customTrustManagerConfig:
            trustStoreFilePath: ""
            trustStoreFilePassword:
              secretRef: ""
              secretKey: ""
            trustStoreFileFormat: ""
            verifyHostname: true
            examineValidityDates: true
          hostNameConfig:
            allowWildCards: false
            acceptableHostNames: []
          jvmDefaultConfig:
            verifyHostname: true
          trustAllConfig:
            examineValidityDates: true
      saml:
        debugMode: false
        idp:
          entityId: ""
          ssoLoginUrl: ""
          idpX509Certificate:
            secretRef: ""
            secretKey: ""
          authorityUrl: "http://openmetadata.openmetadata.svc.cluster.local:8585/api/v1/saml/login"
          nameId: "urn:oasis:names:tc:SAML:2.0:nameid-format:emailAddress"
        sp:
          entityId: "http://openmetadata.openmetadata.svc.cluster.local:8585/api/v1/saml/metadata"
          acs: "http://openmetadata.openmetadata.svc.cluster.local:8585/api/v1/saml/acs"
          spX509Certificate:
            secretRef: ""
            secretKey: ""
          spPrivateKey:
            secretRef: ""
            secretKey: ""
          callback: "http://openmetadata.openmetadata.svc.cluster.local:8585/saml/callback"
        security:
          strictMode: false
          validateXml: false
          tokenValidity: 3600
          sendEncryptedNameId: false
          sendSignedAuthRequest: false
          signSpMetadata: false
          wantMessagesSigned: false
          wantAssertionsSigned: false
          wantAssertionEncrypted: false
          keyStoreFilePath: ""
          keyStoreAlias:
            secretRef: ""
            secretKey: ""
          keyStorePassword:
            secretRef: ""
            secretKey: ""

    jwtTokenConfiguration:
      enabled: true
      # File Path on Airflow Container
      rsapublicKeyFilePath: "./conf/public_key.der"
      # File Path on Airflow Container
      rsaprivateKeyFilePath: "./conf/private_key.der"
      jwtissuer: "open-metadata.org"
      keyId: "Gb389a-9f76-gdjs-a92j-0242bk94356"
    fernetkey:
      value: "jJ/9sz0g0OHxsfxOoSfdFdmk3ysNmPRnH3TUAbz3IHA="
      secretRef: ""
      secretKey: ""
    eventMonitor:
      enabled: true
      # Possible values are prometheus and cloudwatch
      type: prometheus
      batchSize: 10
      pathPattern:
      - "/api/v1/tables/*"
      - "/api/v1/health-check"
      # For value p99=0.99, p90=0.90, p50=0.50 etc.
      latency: []
      # - "p99=0.99"
      # - "p90=0.90"
      # - "p50=0.50"
    secretsManager:
      enabled: true
      # Possible values are db, aws, aws-ssm, managed-aws, managed-aws-ssm, in-memory, managed-azure-kv, azure-kv, gcp
      provider: db
      # Define the secret key ID as /<prefix>/<clusterName>/<key> for AWS
      # Define the secret key ID as <prefix>-<clusterName>-<key> for Azure
      prefix: ""
       # Add tags to the created resource, e.g., in AWS. Format is `[key1:value1,key2:value2,...]`
      tags: []
    web:
      enabled: true
      uriPath: "/api"
      cacheControl: ""
      pragma: ""

ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/tls-acme: "true"
  hosts:
    - host: openmetadata.clusterlab.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
    # - secretName: tls-open-metadata.local
    #   hosts:
    #     - open-metadata.local