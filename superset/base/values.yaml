replicaCount: 2

service:
  type: NodePort
  port: 8088
  nodePort:
    http: null

resources:
  limits:
    cpu: 1
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

extraEnvRaw:
  - name: SUPERSET_SECRET_KEY
    valueFrom:
      secretKeyRef:
        name: superset-secret-key
        key: SUPERSET_SECRET_KEY

configOverrides:
  feature_flags: |
    FEATURE_FLAGS = {
        "ENABLE_TEMPLATE_PROCESSING": True,
        "EMBEDDED_SUPERSET": True,
    }

  10-embed_guest.py: |
    ENABLE_GUEST_TOKEN = True
    GUEST_ROLE_NAME = "Embed"
    GUEST_TOKEN_JWT_ALGO = "HS256"

    ALLOW_IFRAME_EMBED = True
    TALISMAN_ENABLED = True
    TALISMAN_CONFIG = {
      "content_security_policy": {
        "frame-ancestors": ["'self'", "https://*.lappis.ipea.gov.br", "http://localhost:8000"],
      },
      "frame_options": None,
    }

  20-ensure_embedded_pv.py: |
    # Garante as Permission-Views de Embedded e concede ao papel Public no boot
    from superset import app, db, security_manager as sm
    with app.app_context():
        role = sm.find_role("Public") or sm.add_role("Public")
        for perm, view in [
            ("can_read", "Embedded"),
            ("menu_access", "Embedded"),
            ("can_read", "EmbeddedDashboard"),
            ("menu_access", "EmbeddedDashboard"),
        ]:
            pv = sm.find_permission_view_menu(perm, view)
            if not pv:
                sm.add_permission_view_menu(perm, view)
                db.session.commit()
                pv = sm.find_permission_view_menu(perm, view)
            if pv and pv not in role.permissions:
                role.permissions.append(pv)
        db.session.commit()

    # Garante que requests anônimos assumem o papel "Public"
    AUTH_ROLE_PUBLIC = "Public"

envFromSecret: custom-superset-env    # mantém seu secret existente
secretEnv:
  create: false

postgresql:
  enabled: false

redis:
  enabled: true
